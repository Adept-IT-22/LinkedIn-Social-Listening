services:

  #PRODUCTION (standalone mode)
  frontend-prod:
    profiles: ["frontend-prod"]
    build:
      context: ./next
      target: production
      dockerfile: ./Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
    restart:
      unless-stopped
    depends_on:
      - db
    networks:
      - app-network

  # BACKEND
  linkedinsociallistening:
    image: linkedinsociallistening
    profiles: ["backend"]
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - "5002:5002"
    env_file:
      - ./backend/.env
    depends_on:
      - db
    networks:
      - app-network
    restart:
      unless-stopped

  # DATABASE
  db:
    image: postgres:17
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: social_listening
      POSTGRES_USER: mark_mathenge
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password 
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mark_mathenge -d social_listening"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

secrets:
  db_password: 
    file: db_password.txt

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge